# Так как список - это упорядоченная коллекция, у каждого элемента есть свое место, нумерация с 0

a = [43, 54, 2, 54, 32]

print(a[0]) # --------- 43
#print(a[7]) # -------- IndexError: list index out of range обращение к несуществующему элементу
print(a[-1]) # -------- 32 последний элемент

print(a[1:4]) # -------  [54, 2, 54] с первого по четвертый НЕвключительно
print(a[1:]) # --------  [54, 2, 54, 32] с первого и до конца
print(a[:4]) # --------  [43, 54, 2, 54] с нулевого до четвертого НЕвключительно

print(a[::2]) # -------  [43, 2, 32] с нулевого все с шагом 2
print(a[1:5:2]) # -----  [54, 54] с нулевого по пятый НЕвключительнно, с шагом 2
print(a[::-1]) # ------- [32, 54, 2, 54, 43] список задом наперед

# список является изменяемым объектом, то есть можно по индексу поменять значение (в отличии от срок),
# вплоть до того, что срезом можно присвоить новые значения

b = [3, 4, 100, 6, 7, 8, 9, 10, 11]

b[3:5] = 34, 23
print(b) # ----------- [3, 4, 100, 6, 7, 8, 9, 10, 11] присвоены новые значения

b[3:6] = 18, 19
print(b) # ----------- [3, 4, 100, 18, 19, 9, 10, 11] срез на три значения, внесли два, список укоротился на одно значение

# удаление индексов
del b[2]
print(b) # ----------- [3, 4, 6, 7, 8, 9, 10, 11] удалено значение с индексом 2

# ВАЖНО!!! Помним про ссылки и объекты в памяти

a = [1, 2, 3] # --- создаем объект в памяти и переменную, которая на него ссылается
d = a # ----------- создаем еще одну переменную, которая ссылается на ТОТ ЖЕ объект
print(a) # --- [1, 2, 3]
print(d) # --- [1, 2, 3]

d[1] = 100 # ------ меняем элемент в списке d
print(d) # --- [1, 100, 3]
print(a) # --- [1, 100, 3] # --- переменная a тоже изменилась, потому что изменился объект, на который она ссылается

# РЕШЕНИЕ создавать новые объекты копированием
d = a[:] # -------- сделали копию списка, для новой переменной создался НОВЫЙ ОБЪЕКТ, и исходный больше не подвержен изменениям
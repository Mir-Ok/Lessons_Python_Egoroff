# Метод - это просто функция, связанная с определенным типом объекта.
# То есть методы специфичны для каждого типа.
# Вызов метода: объект.метод(аргументы). Без скобок Питон метод не вызывает.

print('hello'.upper()) # --- 'HELLO' переводит все буквы в верхний регистр
print('HellO'.lower()) # --- 'hello' переводит все буквы в нижний регистр

# Строки неизменяемы, поэтому методы показывают нам результат изменений,
# а строки остаются такими же, как и были. То есть если s = 'abc', то s.upper = 'ABC',
# что никак не меняет s. Для того, чтобы изменить исходник, надо переприсвоить значение: s = s.lower()

print('Hello'.count('o')) # --- 1 считает, сколько раз встретилася указанный символ в переменной
        # count(sub[,start[,end]]) - 1 обязательный аргумент, 2 и 3 необязательны (т.к.указаны в []),
        # 1 - какой символ
        # 2 - начиная откуда считаем, 3 - до какого символа невключительно

print('Hello world'.find('e'))   # --- 1 ищет индекс подстроки, который вы хотите найти, номер позиции
print('Hello world'.find('wor')) # --- 6 ищет номер начала совпадения для куска текста
print('Hello world'.find('z'))   # --- - 1 показывает, что такого нет
print('Hello world'.find('o'))   # --- 4 выдает первый встреченный индекс подстроки
        # count(sub[,start[,end]]) - 1 обязательный аргумент, 2 и 3 необязательны (т.к.указаны в []),
        # 1 - какой символ
        # 2 - начиная откуда считаем, 3 - до какого символа невключительно
print('Hello world'.rfind('o'))   # --- 7 выдает последний встреченный индекс подстроки

print('Hello world'.index('e'))  # --- аналогичен find, но при отсутвии символа аварийно завершает программу

print('Hello world'.replace('e', '!!'))  # --- H!!llo world, замена символов
print('Hello world'.replace('l', '!!', 2))  # --- He!!!!o world
        # replace(old, new, count = -1, /)
        # old - что меняем, new - на что, count - сколько замен

s = 'Hello world'

print(s.isalpha()) # --- False проверяет, состоит ли только из строк (есть пробел, поэтому не чисто строка)
print(s.isdigit()) # --- False проверяет, состоит ли только из чисел

d = '111'
print(d.ljust(5,'0')) # --- 11100 добедет до 5 символов, прижав к ЛЕВОМУ краю имеющееся и прибавив справа указ.символ, один
print(d.rjust(5,'-')) # --- --111 добедет до 5 символов, прижав к ПРАВОМУ краю имеющееся и прибавив справа указ.символ, один

w = 'Иванов Иван Иванович'
print(w.split())    # --- ['Иванов', 'Иван', 'Иванович'] разбивает строку по пробелам по умолчанию, пробелы удаляет
print(w.split('н')) # --- ['Ива', 'ов Ива', ' Ива', 'ович'] разбивает строку по указанному символу, пробелы игнорирует

t = '42,538,57,84,569,85'.split(',')    # --- создаем переменную
print(t)                                # --- ['42', '538', '57', '84', '569', '85']
print('='.join(t))                      # --- 42=538=57=84=569=85

# методы можно вызывать цепочкой
print(','.join(w.split()))              # ---  'Иванов,Иван,Иванович'

q = '     hello     \n'
print(q)                  # --- '     hello     '
print(q.strip())          # --- 'hello' удаляет пробелы и переносы строки полностью
print(q.rstrip())         # --- '     hello' удаляет пробелы и переносы строки справа
print(q.lstrip())         # --- 'hello     ' удаляет пробелы и переносы строки слева

f = input().upper()  # --- 'hello'
print(f)             # --- 'HELLO'

print(f.lower().replace('e','w').upper()) # --- PRIVET - privet - privwt - PRIVWT
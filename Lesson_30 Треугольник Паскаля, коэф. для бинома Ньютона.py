'''

Биноминальные коэффициенты - исп. в формуле бинома Ньютона, которая позволяет возвести сумму двух натуральных чисел
в степень n. Простой пример, для n = 2: (a + b)**2 = a**2 + 2ab + b**2, у слагаемых коэффициенты 1 - 2 - 1.
Для n = 4: (a + b)**4 = a**4 + 4a**3b + 6a**2b**2 + 4ab**3 + b**4, у слагаемых коэффициенты 1 - 4 - 6 - 4 - 1/

Общий вид: сначала первое слагаемое в максимальной  и второе в 0, далее первое в степени n-1, и второе в 1,
далее первое в степени n - 2, второе во 2 ... первое в 0, последнее в максимальной.
И коэффициенты из треугольника Паскаля, соотв. уровню. Треугольник создается как сумма составляющих предыдущего уровня

n = 0        1
n = 1       1 1
n = 2      1 2 1
n = 3     1 3 3 1
n = 4    1 4 6 4 1

Отсчет начинается с 0 уровня, и поэтому кол-во коэф. на уровне соответствует его номеру.

Для создания треугольника циклом, представим коэф. в виде матрицы:

n = 0    1 0 0 0 0
n = 1    1 1 0 0 0
n = 2    1 2 1 0 0
n = 3    1 3 3 1 0
n = 4    1 4 6 4 1

Формула для заполнения таблицы: a[i][j] = a[i-1][j]  + a[i-1][j-1]
(сумма элемента на строку выше тот же столбец и на строку выше, на столбец раньше).
Проблема в том, что для этого подходят только элементы с сседями, иначе выйдем за пределы,
плюс не трогаем элементы выше главной диагонали

'''

n = int(input())
triangle = []

for i in range(n+1):
    triangle.append([1] + [0] * n)  # элементов больше на 1

for i in triangle:
    print(i)
    ''' вывод 
    4
    [1, 0, 0, 0, 0]
    [1, 0, 0, 0, 0]
    [1, 0, 0, 0, 0]
    [1, 0, 0, 0, 0]
    [1, 0, 0, 0, 0]
    '''

for i in range(1, n + 1):
    for j in range(1, n + 1):  # --- если вместо n+1 поставить i+1, то мы уберем 0 выше главной диагонали
        triangle[i][j] = triangle[i - 1][j] + triangle[i - 1][j - 1]

for i in range(0, n + 1):
    for j in range(0, n + 1):
        print(triangle[i][j], end=' ')
    print()
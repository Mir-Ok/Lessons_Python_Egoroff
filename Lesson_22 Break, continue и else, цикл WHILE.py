'''
Бесконечный цикл - работает вечно, потму что ограничивающее условие всегда выполняется. Например:

i = 1
while i > 0:
    print('Итерация №', i)
    i += 1

Цикл можно прервать вручную, но это срывает всю программу, инструкции после бесконечного цикла не выполнятся тоже.
'''

# Решение: прерывание цикла break, программа выполняетвсе в цикле, что было до, и не выполняет то, что было после.
# По сути, команда break выводит нас из цикла

i = 1
while i > 0:
    print('Итерация №', i)
    if i == 10:
        break
        print('hi')  # --- проигнорированная инструкция
    i += 1
print('hello')

# пример с текстом

while True:
    a = input()
    if a == 'exit':
        break
    print(a, len(a))
''' вывод
неер
неер 4
рап
рап 3
exit
'''

# Инструкция continue, которая вовзращает нас к началу цикла, игнорируядальнейшие инструкции.
# Не прерывает цикл, только пропускает его часть.

while True:
    a = input()
    if a == 'exit':
        break
    if len(a) < 5:
        continue
    print(a, len(a))
''' вывод 
пре
ооавпралопывалп
ооавпралопывалп 15
орп
ваваап
ваваап 6
exit
'''

# Инструкция else. Запускает выполнение команд, если основное условие НЕ выполнено.
# Противоречат друг другу с break, хотя иногда их полезно совместить

# Задача: выводить yes, если все члены списка a = [54, 32, 65, 765, 32, 543] четные и No, в противном случае.

a = [54, 32, 65, 765, 32, 543]

while len(a) > 0:  # ----- пока в списке еще есть элементы
    last = a.pop()  # ---- удаляем из списка последний элемент, вставляем его в переменную
    if last % 2 != 0:  # - если переменная содержит нечетное значение
        print('No', last)  # --- выводим Нет
        break  # --------- перываем цикл, по сути, до первого выполнения условия выше
else:  # ----------------- если не одного прерывания не случилось
    print('Yes')  # ------ выводим Да

'''
В задаче выше else срабатывает, если мs ни разу не попали в цикл с break
Прерывание сразу же, как выполнилось условие, без перебора дальнейших элементов имеет свои случаи применения
'''
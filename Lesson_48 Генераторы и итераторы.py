'''
Генератор - итератор, элементы которого можно обойти только один раз.

В программе с болшим кол-вом вычислений, или многочисленными данным, которые надо сохранить лучше
использовать итераторы.
'''

# пример генератора списка
a = [i**2 for i in range(1, 6)]
print(a)  # --> [1, 4, 9, 16, 25]

'''
Итератор - это объект, который поддерживает функцию next(), то есть помнит о том,
какой элемент будет браться следующим. И при вызове этой функции берет следующий элемент
коллекции и помнит, какой взять следующим при вызове.

Итерируемый объект - объект, который предоставляет возможность обойти поочередно свои элементы.
Может быть преобразован к итератору. Например, это список. Сам по себе он не поддерживает функцию next(),
Но мы можем преобразовать список в итератор при помощи функции iter().

'''

a = [1, 2, 3, 4, 5]
d = iter(a)
print(next(d))  # --> 1
print(next(d))  # --> 2
print(next(d))  # --> 3
print(next(d))  # --> 4
print(next(d))  # --> 5
# print(next(d))  # --> Traceback (most recent call last): StopIteration

''' Выражение - генератор сразу является итератором, записывается аналогично генератору списков,
но скобки () вместо []
'''

b = (i**2 for i in range(1, 6))
print(b)  # --> <generator object <genexpr> at 0x000002950CFEFDD0>
print(next(b))  # --> 1
print(next(b))  # --> 4
print(next(b))  # --> 9
print(next(b))  # --> 16
print(next(b))  # --> 25
# print(next(b))  # --> Traceback (most recent call last): StopIteration

'''
ВАЖНО! Генератор поддерживает только один обход, дважды вывести элементы нельзя.
Это происходит потому что элементы генератора не хранятся в памяти, а генерируются
на лету, это сильно ускоряет работу.
'''
b = (i**2 for i in range(1, 6))
print('first')
for i in b:
    print(i)
print('second')
for i in b:
    print(i)
    ''' вывод 
    first
    1
    4
    9
    16
    25
    second
    '''

c = (i**2 for i in range(1, 6))
print(sum(c))  # --> 55
print(sum(c))  # --> 0, второй раз не срабатывает

# пример использования памяти

# e = list(range(10000000000))  # --> Traceback (most recent call last): MemoryError
# e = [i for i in range(10000000000)]  # --> Traceback (most recent call last): MemoryError
e = (i for i in range(10000000000))  # ошибок нет, можем обойти список е циклом for
                                     # (он сам вызывает функцию next()

''' 
Ограничения итератора: можно легко преобразовать в список через list(), 
нельзя узнать длину итератора через len(), к нему нельзя применить индексацию,
всегда помним про оформление в круглые скобки, можно обходить только один раз, ровно как и обрабатывать функциями.
Нельзя из одного генератора дважды создать спислк
'''

c = (i**2 for i in range(1, 6))
print(c)  # --> <generator object <genexpr> at 0x000001302C2B0660>
print(list(c))  # --> [1, 4, 9, 16, 25]
print(list(c))  # --> []
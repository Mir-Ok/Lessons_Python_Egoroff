# 1. Какой физический смысл операций? Если у нас есть корзина на 12 яиц, а на столе у нас 41 яйцо,
# то 41 = 12 * 3 + 5

print(41 // 12)    # --> 3 раза 12 полностью помещается в 41, т.е. 3 корзины
print(41 % 12)     # --> 5 яиц останется лишними, если мы заполним все корзины

# 2. Операция % нужна, когда есть закономерности появления чисел, арифметическая прогрессия


# 3. Получение части числа через деление на 10

print(2586 // 10)      # --> 258 отбрасываем в конце столько, на сколько "нулей" делим
print(2586 // 100)     # --> 25
print(2586 // 1000)    # --> 2

print(2586 % 10)       # --> 6   берем с конца столько, на сколько "нулей" делим
print(2586 % 100)      # --> 86
print(2586 % 1000)     # --> 586

print(47685 // 1000 % 10)     # --> 7   отбросили три цифры в конце, осталось 47 и взяли последнюю


# 4. Разложение числа на составляющие

x = 28654
a = x // 10000  # -----> 2
b = x // 1000 % 10  # -> 8
c = x // 100 % 10  # --> 6
d = x // 10 % 10  # ---> 5
e = x % 10  # ---------> 4

print(a, b, c, d, e)  # --> 2 8 6 5 4


# 5. Работа с отрицательными числами

print(19 / 5)  # --> 3.8
print(19 // 5) # --> 3
print(19 % 5)  # --> 4

# то есть если обычное деление округлить вниз, то мы получим результат деления нацело.

print(19 / - 5)  # --> - 3.8
print(19 // - 5)  # --> - 4, округление вниз не приведет в -3
print(- 19 // 5)  # --> -4
print(- 19 // - 5)  # --> 3

# но как получить остаток от деления? Здесь немного другая логика, т.е. сколько нам не хватает для того,
# чтобы поделить без остатка на следующее число? К -19 ближе всего -20, и нам не хватает всего -1,
# чтобы поделить нацело без остатка.
# общая формула a = a // b * b + q, а остаток проверим ниже

print(19 % -5)  # --> -1 ... 19 = -4 * -5 - 1
print(-19 % 5)  # --> 1 ... - 19 = - 4 * 5 + 1




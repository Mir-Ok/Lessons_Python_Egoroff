'''

Цикл называется вложенным, если он располагается внутри другого цикла (nested cycle)

for < переменная > in < объект >:
    for < переменная > in < объект >:
        < действия >
    < действия >

Ипользуются для перебора всех возможных значений
'''

for i in range(3): # ------------- повторяем 3 раза, аналог строки
    for j in range(5): # --------- повторяем 5 раз, аналог столбца
          print('*', end = '') # - вывод * 5 раз
    print() # -------------------- после 5 * перенос строки, конец кода, возврат к началу цикла (на соотв. уровне)
''' вывод
*****
*****
*****
'''

# пока отрабатывает внутренний цикл, внешняя переменная не изменяется, т.е. пока мы 5 раз выводим i, она неизменна,
# после 5 раз внутренний шикл заканчивается, мы поднимаемся во внешний, меняем i и снова спускаемся во
# вложенный, и 5 раз выводим обновленную i

for i in range(3):
    for j in range(5):
        print(i, end = '')
    print()
''' вывод 
00000 
11111
22222
'''

# если поменять местами, то получается что мы три раза повторяем последовательный вывод j

for i in range(3):
    for j in range(5):
        print(j, end = '')
    print()
''' вывод 
01234
01234
01234
'''

# если привязать кол-во выводов внутреннего цикла к внешней переменной

for i in range(5):
    for j in range(i):
        print(j, end = '')
    print()
''' вывод 
. --------- когда i = 0, вложенный цикл не срабатывает
0 --------- когда i = 1, вложенный цикл for j in range(1) - выводится только 0
01 -------- когда i = 2, вложенный цикл for j in range(2) - выводится 01, 2 не включается
012 ------- когда i = 3, вложенный цикл for j in range(3) - выводится 012, 3 не включается
0123 ------ когда i = 4, вложенный цикл for j in range(4) - выводится 0123, 4 не включается
'''

# протестируем вывод обеих переменных одновременно, в этом случае первая переменная примет значение,
# и оно будет сочетатся с каждым значением вложенного цикла, далее сменится внешняя переменная на
# следующую и тоже будет сочтена с каждой из внутреннего

for i in 'ab':
    for j in 'cd':
        print(i, j)
''' вывод 
a c
a d
b c
b d
'''

'''
# подбор пароля

from string import printable
print(printable)  # --> 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

for i1 in printable:
    for i2 in printable:
        for i3 in printable:
            print(i1, i2, i3)  # вывод всех возможных сочетаний этих букв по три символа
'''

# таблица умножения, т.к. в скобках первой стоит внешняя переменная, а второй - внутренняя,
# мы получаем стандартный вид таблицы умножения

for i in range(1, 5):
    for j in range(1, 6):
        print(j, '*', i, '=', i * j, end = ' ')
    print()
'''
1 * 1 = 1 2 * 1 = 2 3 * 1 = 3 4 * 1 = 4 5 * 1 = 5 
1 * 2 = 2 2 * 2 = 4 3 * 2 = 6 4 * 2 = 8 5 * 2 = 10 
1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 4 * 3 = 12 5 * 3 = 15 
1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 5 * 4 = 20 
'''

# Сколько слов из шести букв можно составить из Т Ы К В А. В конце и начале согласные, гласных всего две
# перебор это надежно, но долго, т.к. всего комбинаций 5 ** 6 = 15625

k = 0
for b1 in 'tukva':
    for b2 in 'tukva':
        for b3 in 'tukva':
            for b4 in 'tukva':
                for b5 in 'tukva':
                    for b6 in 'tukva':   # --------------------------------- повторяем 6 раз, т.к. букв 6
                        rez = b1 + b2 + b3 + b4 + b5 + b6  # --------------- собираем из символов слово
                        if rez[0] in 'tkv' and rez[-1] in 'tkv':  # -------- проверяем начало и конец слова на согласные
                            if rez.count('a') and rez.count('u') == 2:  # -- проверяем сумму гласных
                                k += 1  #----------------------------------- если слово отвечает всем условиям - увеличиваем счетчик
print(k)

# внутри цикла for можт быть while, например, задача про сумму всех цифр числа

for i in range(1, 10001):
    x = i
    s = 0
    while x > 0:  # ---- получаем x, проверяем условие
        s += x % 10  # - добавляем к общей сумме последнюю цифру
        x //= 10  # обрасываем от x последнюю цифра, предпоследняя встает на ее место
    print(i,s)

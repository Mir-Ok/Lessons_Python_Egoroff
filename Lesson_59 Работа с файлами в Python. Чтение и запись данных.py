
file = open('111.txt', encoding='utf-8')  # --> поместим в переменную содержимое файла, кодировку только для русских текстов
file1 = open(r'D:\1_Python\Уроки Egoroff\111.txt', encoding='utf-8')  # --> не забываем поставить r перед строкой, см. экранирование символов

'''
print(file.read())  # --> обработаем переменную методом и выведем содержимое, получим белиберду, добавим кодировку выше
print(file1.read())
 
print(file.read(10))  # --> "Здесь что-" выводит указанное кол-во символов
print(file.read(10))  # --> "то написан" при следующем вызове продолжает, команда аналогична каретке пищущей машинки

file.seek(0)  # --> откатывает каретку на начало
print(file.read(5))  # --> "Здесь"

file.seek(0)
print(file.readline())  # -->  Здесь что-то написано
print(file.readline())  # -->
print(file.readline())  # -->  Неизвестно что

for row in file:  # --> это итерируемый объект
    print(row)  # --> переберет все строки

for row in file:  # --> это итерируемый объект
    for letter in row:
        print(letter)  # --> переберет все буквы (каждую выведет на отдельной строке)


s = file.readlines()  # --> метод, создающий списки из строк, с переносм строки в конце каждой
print(s)  # --> ['Здесь что-то написано\n', '\n', 'Неизвестно что']
'''

# Для того, чтобы иметь возможность записывать в файл, его необходимо изначально
# открывать не в режиме "r" (чтение), а в режиме "w" (запись).
# Важно, это будет полная перезапись файла, а не дополнение

file2 = open('111.txt', 'w', encoding='utf-8')
file2.write('hello')
file2.write('hello')
file2.write('hello')  # --> все содержимое файла изменилось на hellohellohello, чтобы были переносы - их надо поставить символом \n

# Для того, чтобы иметь возможность записывать в файл, его необходимо изначально
# открывать не в режиме "w" (чтение), а в режиме "a" (запись).
# Важно, это будет дополнение, а не полная перезапись файла.

file3 = open('111.txt', 'a', encoding='utf-8')

# Режимы, описанные выше имеют монофункцию. Чтобы одновременно записывать файл и читать его,
# например, подходит режим 'a+

file.close()  # обязательно закрываем файл, чтобы он не отжирал лишнюю память. Важно! Если пв прочессе раоты с файлом поизошла ошибка, он не дойдет до закрытия.
# Поэтому обрабатываем это конструкцией try - except или используем менеджеры контекста
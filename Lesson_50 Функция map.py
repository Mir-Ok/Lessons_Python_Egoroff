'''
Функция принимает функцию, затем итерабельные последовательности (списки, кортежи, словари, range, строки),
все что можно обойти в цикле for

class map(object):
  map(func, *iterable) --> map object

Это итератор, который вычисляет результат работы функции, которую вы сюда передали на каждый аргумент из этой последовательности

'''

a = [-1, 2, -3, 4, 5]
b = map(abs, a)
print(b)  # --> <map object at 0x000001BF7A74B130>

''' 
Чтобы увидеть результат, итератор это способ обходить коллекции, а так же работать с функциями, которые действуют над 
коллекциями (sum, max ...)? а так же возможность преобразования к другим колекциям, например, list
'''
a = [-1, 2, -3, 4, 5]
b = list(map(abs, a))
print(b)  # --> [1, 2, 3, 4, 5] к каждому поочередно применилась функция abs
          # -- аналог [abs(1), abs(2), abs(-3), abs(4), abs(5)]

# аналог записи
c = [abs(i) for i in a]
print(c)  # --> [1, 2, 3, 4, 5]

''' 
можем передавать самописные функции
'''
def f(x):
    return x**2
b = list(map(f, a))
print(b)  # --> [1, 4, 9, 16, 25]

''' 
работа со строками
'''
e = ['hello', 'hi', 'good mo']
f = list(map(len, e))
print(f)  # --> [5, 2, 7]

# можно вызвать метод строки
e = ['hello', 'hi', 'good mo']
f = list(map(str.upper, e))
print(f)  # --> ['HELLO', 'HI', 'GOOD MO']

# создаем самописную функцию
e = ['hello', 'hi', 'good mo']
f = list(map(lambda x: x[::-1], e))
print(f)  # --> ['olleh', 'ih', 'om doog']

# аналог записи
c = [i[::-1] for i in e]
print(c)  # --> ['olleh', 'ih', 'om doog']

# создаем список из строки, каждое слово - вложенный список
e = ['hello', 'hi', 'good mo']
f = list(map(list, e))
print(f)  # --> [['h', 'e', 'l', 'l', 'o'], ['h', 'i'], ['g', 'o', 'o', 'd', ' ', 'm', 'o']]

g = list(map(sorted, f))
print(g)  # --> [['e', 'h', 'l', 'l', 'o'], ['h', 'i'], [' ', 'd', 'g', 'm', 'o', 'o', 'o']]

''' считывание целых чисел '''

# s = int(input())
# print(s) # --> краш, если вводить два и более чисел с пробелами, не может их перевести в int

s = list(map(int, input().split()))
print(s) # -->  [2, 5]
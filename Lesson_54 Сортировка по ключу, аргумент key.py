a = [4, -10, 43, -300, 54, 289, -34, -8, 749]
print(sorted(a))  # --> [-300, -34, -10, -8, 4, 43, 54, 289, 749]

# 1_сортировка по встроенным функциям
print(sorted(a, key=abs))  # --> по модулю [4, -8, -10, -34, 43, 54, 289, -300, 749]

# 2_сортировка по кастомным функциям, по последней цифре по возрастанию

a = [4, 10, 43, 300, 54, 289, 34, 8, 749]


def f(x):
    return x % 10
print(sorted(a, key=f))  # --> [10, 300, 43, 4, 54, 34, 8, 289, 749]

def f(x):  # если последние цифры совпадают, смотрим предпоследнюю
    return x % 10, x // 10 % 10  # откидываем последнюю и берем предпоследнюю
print(sorted(a, key=f))  # --> [300, 10, 43, 4, 34, 54, 8, 749, 289]

# 3_сортировка по кастомным функциям, по последней цифре по убыванию
def f(x):
    return -(x % 10)
print(sorted(a, key=f))  # --> [289, 749, 8, 4, 54, 34, 43, 10, 300]

# -------------------------------------

a = ['ZZZ', 'aaa', 'eee', 'ddd', 'BBB', 'www']
print(sorted(a))  # --> ['BBB', 'DDD', 'ZZZ', 'aaa', 'eee', 'www'] большая буква больше маленькой

print(sorted(a, key=str.lower))  # --> ['aaa', 'BBB', 'DDD', 'eee', 'www', 'ZZZ']

a = ['ZZZ 79', 'aaa 45', 'eee 43', 'DDD 800', 'BBB 5', 'www 14']
print(sorted(a, key=lambda x: int(x.split()[1])))  # --> ['BBB 5', 'www 14', 'eee 43', 'aaa 45', 'ZZZ 79', 'DDD 800']

a = ['ZZZ 800', 'aaa 45', 'eee 43', 'ddd 800', 'BBB 43', 'www 14']
print(sorted(a, key=lambda x: (int(x.split()[1]), x.split()[0].lower())))  # --> ['www 14', 'BBB 43', 'eee 43', 'aaa 45', 'ddd 800', 'ZZZ 800']
''' задаем второе условие для сортироки (по алфавиту), если цифры равны. Чтобы анонимная функция выдала одно значение, 
а не два, мы помещаем инструкцию в кортеж, тогда программа срабатывает без глюков'''

a = ['ZZZ 800', 'aaa 45', 'eee 43', 'ddd 800', 'AaA 43', 'aaa 14']
a = sorted(a, key=lambda x: int(x.split()[1]))
a = sorted(a, key=lambda x: x.split()[0].lower(), reverse = True)
print(a)  # --> ['ZZZ 800', 'eee 43', 'ddd 800', 'aaa 14', 'AaA 43', 'aaa 45']
''' сначала отсортировали по цифрам, потом по буквам в обратном порядке'''
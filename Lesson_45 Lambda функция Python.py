'''
Это функция с упрощенным синтаксисом.

В ней не прописывается return, он подразумевается. Поэтому функции, котрые ничего не возвращают,
через лямбда прописывать не получится.

Нельзя через лямба реализовать функции с циклами.

С некоторой натяжкой можно использовать условные операторы

Есть смысл использовать, когда нужно произвести одно действие.

Можно создать функцию без аргумента, она будет просто возвращать заданное
'''

# _1 синтаксис обычной функции

def f(x):
    return x ** 2
print(f(4))  # --> 16

# _2 синтаксис лямбда-функции
# lambda arg1, arg2 ... : выражение

f = lambda x: x ** 2
print(f(7))  # --> 49

# _3 синтаксис лямбда-функции без аргумента


g = lambda: 'hello'
print(g())  # --> hello

# _4 синтаксис лямбда-функции с условием


def f(x):
    if x > 0:
        print('positive')
    else:
        print('negative')


g = lambda x: 'positive' if x > 0 else 'negative'
print(g(5))  # --> positive

# _4 сортировка списка

a = [78, 56, 23, 8, 54512, 95, 2354, 41, 5000]
def f(x):
    return x % 10  # возвращает остаток от деления на 10 от каждого поданного числа (список последовательно)
a.sort(key=f)  # у метода списков .sort() есть аргумент, в который можно подать способ сортировки
print(a)  # --> [5000, 41, 54512, 23, 2354, 95, 56, 78, 8]

# либо компактнее

a = [78, 56, 23, 8, 54512, 95, 2354, 41, 5000]
a.sort(key=lambda x: x % 10)
print(a)  # --> [5000, 41, 54512, 23, 2354, 95, 56, 78, 8]

# _5 создание вложенных функций

def linear(k,b):
    return lambda x: k*x + b

graf1 = linear(2,5)  # по сути мы написали graf1 = 2*x + 5
print(graf1(3))  # 11 вызываем созданную шагом выше функцию, подав ей аргумент





